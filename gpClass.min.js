Date.prototype.nextHalfHour=function(interval=0){let currentDate=new Date,compDate=new Date(currentDate.getTime());compDate.setMinutes(this.getMinutes());let returnDate=compDate>currentDate?new Date(compDate.getTime()):new Date(compDate.getTime()+18e5);return returnDate.setSeconds(0),returnDate.setMilliseconds(0),returnDate=returnDate<currentDate?new Date(returnDate.getTime()+18e5):returnDate,returnDate=returnDate<this?this:returnDate,new Date(returnDate.getTime()+30*interval*6e4)};class GamePlan{#availableColorSchemes;#booleanStrings;#lunchDurationLimit;#tasksLimit;constructor(lunchDurationLimit,tasksLimit){this.#availableColorSchemes=["dark","light"],this.#booleanStrings=["true","false"],this.#lunchDurationLimit=lunchDurationLimit||0,this.#tasksLimit=tasksLimit||0}get startTime(){return localStorage.getItem("startTime")||"00:00"}set startTime(newStartTime){this.#hourLimits(newStartTime.split(":")[0])&&this.#minuteLimits(newStartTime.split(":")[1])&&localStorage.setItem("startTime",newStartTime)}get endTime(){return localStorage.getItem("endTime")||"00:00"}set endTime(newEndTime){this.#hourLimits(newEndTime.split(":")[0])&&this.#minuteLimits(newEndTime.split(":")[1])&&localStorage.setItem("endTime",newEndTime)}get lunchTime(){return localStorage.getItem("lunchTime")||"00:00"}set lunchTime(newLunchTime){this.#hourLimits(newLunchTime.split(":")[0])&&this.#minuteLimits(newLunchTime.split(":")[1])&&localStorage.setItem("lunchTime",newLunchTime)}get lunchDuration(){return localStorage.getItem("lunchDuration")||0}set lunchDuration(newLunchDuration){this.#lunchDurationLimit>0&&newLunchDuration>=this.#lunchDurationLimit||localStorage.setItem("lunchDuration",newLunchDuration)}get goalTime(){return localStorage.getItem("goalTime")||"00:00"}set goalTime(newGoalTime){this.#hourLimits(newGoalTime.split(":")[0])&&this.#minuteLimits(newGoalTime.split(":")[1])&&localStorage.setItem("goalTime",newGoalTime)}get goalTasks(){return localStorage.getItem("goalTasks")||0}set goalTasks(newGoalTasks){this.#tasksLimit>0&&newGoalTasks>=this.#tasksLimit||localStorage.setItem("goalTasks",newGoalTasks)}get colorScheme(){return localStorage.getItem("colorScheme")||(window.matchMedia("(prefers-color-scheme:light)").matches?"light":"dark")}set colorScheme(newColorScheme){this.#availableColorSchemes.includes(newColorScheme)&&localStorage.setItem("colorScheme",newColorScheme)}get milestone(){return localStorage.getItem("milestone")||"true"}set milestone(newMilestone){this.#booleanStrings.includes(newMilestone)&&localStorage.setItem("milestone",newMilestone)}get perHour(){return localStorage.getItem("perHour")||"true"}set perHour(newPerHour){this.#booleanStrings.includes(newMilestone)&&localStorage.setItem("perHour",newPerHour)}get morningStart(){return this.#setDate(this.startTime.split(":")[0],this.startTime.split(":")[1])}get morningEnd(){return this.#setDate(this.lunchTime.split(":")[0],this.lunchTime.split(":")[1])}get afternoonStart(){return this.#setDate(this.lunchTime.split(":")[0],parseInt(this.lunchTime.split(":")[1])+parseInt(this.lunchDuration))}get afternoonEnd(){return this.#setDate(this.endTime.split(":")[0],this.endTime.split(":")[1])}get tpt(){return Math.round((Math.abs(this.morningEnd-this.morningStart)+Math.abs(this.afternoonEnd-this.afternoonStart))/1e3/this.goalTasks*100)/100}get tpgt(){return(Math.abs(this.morningEnd-this.morningStart)+Math.abs(this.afternoonEnd-this.afternoonStart))/1e3/Math.round(100*(3600*this.goalTime.split(":")[0]+60*this.goalTime.split(":")[1])/100)}get tasksPerHour(){return Math.round(60/(Math.round((Math.abs(this.morningEnd-this.morningStart)+Math.abs(this.afternoonEnd-this.afternoonStart))/1e3/this.goalTasks*100)/100)*60*100)/100}get minutesPerHour(){return 60/(Math.round((Math.abs(this.morningEnd-this.morningStart)+Math.abs(this.afternoonEnd-this.afternoonStart))/1e3/(3600*this.goalTime.split(":")[0]+60*this.goalTime.split(":")[1])*100)/100)}#currentLevels(setTime){let elapsedMorningPercent=0,elapsedAfternoonPercent=0;return setTime>=this.morningStart&&setTime<=this.morningEnd&&(elapsedMorningPercent=Math.abs(setTime-this.morningStart)/Math.abs(this.morningEnd-this.morningStart)),setTime>=this.afternoonStart&&setTime<=this.afternoonEnd&&(elapsedAfternoonPercent=Math.abs(setTime-this.afternoonStart)/Math.abs(this.afternoonEnd-this.afternoonStart)),setTime>=this.morningEnd&&(elapsedMorningPercent=1),setTime>=this.afternoonEnd&&(elapsedAfternoonPercent=1),{elapsedMorningPercent:elapsedMorningPercent,elapsedAfternoonPercent:elapsedAfternoonPercent}}currentLevels(type=["time","task","milestone"],setTime){setTime&&(setTime.setSeconds(0),setTime.setMilliseconds(0));let returnObj={},currentDate=setTime||new Date,morningPercent=Math.abs(this.morningEnd-this.morningStart)/(Math.abs(this.morningEnd-this.morningStart)+Math.abs(this.afternoonEnd-this.afternoonStart)),afternoonPercent=Math.abs(this.afternoonEnd-this.afternoonStart)/(Math.abs(this.afternoonEnd-this.afternoonStart)+Math.abs(this.morningEnd-this.morningStart));if(type.includes("time")){let morningGoalTime=(3600*this.goalTime.split(":")[0]+60*this.goalTime.split(":")[1])*morningPercent,afternoonGoalTime=(3600*this.goalTime.split(":")[0]+60*this.goalTime.split(":")[1])*afternoonPercent,currentTime=this.#currentLevels(currentDate);returnObj.time={},returnObj.time.text=Math.floor((morningGoalTime*currentTime.elapsedMorningPercent+afternoonGoalTime*currentTime.elapsedAfternoonPercent)/3600)+"h "+Math.floor((morningGoalTime*currentTime.elapsedMorningPercent+afternoonGoalTime*currentTime.elapsedAfternoonPercent)%3600/60)+"m",returnObj.time.value=Math.floor(morningGoalTime*currentTime.elapsedMorningPercent+afternoonGoalTime*currentTime.elapsedAfternoonPercent)}if(type.includes("task")){let morningGoalTasks=this.goalTasks*morningPercent,afternoonGoalTasks=this.goalTasks*afternoonPercent,currentTask=this.#currentLevels(currentDate);returnObj.task={},returnObj.task.text=Math.floor(morningGoalTasks*currentTask.elapsedMorningPercent+afternoonGoalTasks*currentTask.elapsedAfternoonPercent)+"tasks",returnObj.task.value=Math.floor(morningGoalTasks*currentTask.elapsedMorningPercent+afternoonGoalTasks*currentTask.elapsedAfternoonPercent)}return type.includes("milestone")&&(returnObj.milestone={},returnObj.milestone.text=this.milestones()),returnObj}milestones(){let retArray=[];for(let n=0;n<4;n++){let startTime=this.#setDate(this.startTime.split(":")[0],this.startTime.split(":")[1]),tasks=this.currentLevels("task",startTime.nextHalfHour(n)),time=this.currentLevels("time",startTime.nextHalfHour(n));startTime.nextHalfHour(n)<=this.#setDate(this.endTime.split(":")[0],this.endTime.split(":")[1])&&retArray.push(this.#leadingZero(startTime.nextHalfHour(n).getHours())+":"+this.#leadingZero(startTime.nextHalfHour(n).getMinutes())+": "+time.time.text+" "+tasks.task.text)}return retArray}#leadingZero(value){return(value=parseInt(value))<10?"0"+value:value}#setDate(hour,minute){let d=new Date;return d.setHours(parseInt(hour)),d.setMinutes(parseInt(minute)),d.setSeconds(0),d.setMilliseconds(0),d}#hourLimits(value){return parseInt(value)>=0&&parseInt(value)<24}#minuteLimits(value){return parseInt(value)>=0&&parseInt(value)<59}#getIntervals(task){let nextUpdate,levels=this.currentLevels(),lunchHour=new Date>new Date(this.#setDate(this.lunchTime.split(":")[0],this.lunchTime.split(":")[1])+6e4*this.lunchDuration)?parseInt(this.lunchDuration):0;return"task"===task&&(nextUpdate=6e4*lunchHour+1e3*this.tpt+levels.task.value*this.tpt*1e3+this.#setDate(this.startTime.split(":")[0],this.startTime.split(":")[1]).getTime()),"time"===task&&(nextUpdate=6e4*lunchHour+6e4*this.tpgt+parseInt(levels.time.value/60)*this.tpgt*6e4+this.#setDate(this.startTime.split(":")[0],this.startTime.split(":")[1]).getTime()),"milestone"===task&&(nextUpdate=this.#setDate(this.startTime.split(":")[0],this.startTime.split(":")[1]).nextHalfHour().getTime()),Math.abs(nextUpdate-(new Date).getTime())}updateTime(type=["time","task","milestone"]){type.forEach((el=>{window.dispatchEvent(new CustomEvent(`gp-update-${el}`,{detail:this.currentLevels(type)[el]})),setTimeout(this.updateTime.bind(this,[el]),this.#getIntervals(el))}))}}